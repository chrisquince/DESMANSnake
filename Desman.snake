from Bio.SeqIO.FastaIO import SimpleFastaParser
import glob,os
include: "Common.snake"

rule all : 
    input: expand("desman/{group}/{bins}/desman_analysis_done",group=GROUPS,bins=BINS)
    

rule extract_counts:
    input:
        all_counts = lambda wildcards: expand("Samples_files/{group}/{bin}/{sample}.cnt.gz",sample=SAMPLES,group=wildcards.group,bin=wildcards.bin),
        SCG_bedlike="annotation/{bin}/SCG_bed_like.tsv"
    output:
        "Samples_files/{group}/{bin}/count.csv"
    params:
        input_dir = "Samples_files/{group}/{bin}"
    log:
        "Samples_files/{group}/{bin}/extract_counts.log"
    shell:"""
    python {DSCRIPTS}/ExtractCountFreqGenes.py {input.SCG_bedlike} {params.input_dir} --output_file {output} &>> {log}
        """

checkpoint Filter_Variant:
    input:
        "Samples_files/{group}/{bin}/count.csv"
    output :
        expand("desman/{{group}}/{{bin}}/freqs_{output_file_type}",output_file_type = ["sel_var.csv", "p_df.csv", "q_df.csv", "r_df.csv", "tran_df.csv", "log.txt"])
    params : "desman/{group}/{bin}/freqs_"
    log:
        "desman/{group}/Logs/{bin}_Filter_variant.log"
    shell:"""
        Variant_Filter.py {input} -o {params} -p -m {MIN_COV_DESMAN} 2>{log}
        """

rule run_desman:
    input:
        sel_var="desman/{group}/{Bin}/freqs_sel_var.csv",
        err="desman/{group}/{Bin}/freqs_tran_df.csv"
    output:
        "desman/{group}/{Bin}/Run_{g}_{r}/fit.txt"
    params:"desman/{group}/{Bin}/Run_{g}_{r}"
    log:
        "desman/{group}/Logs/Run_{g}_{r}/{Bin}_{g}_{r}.log"
    shell:"""
      desman {input.sel_var} -e {input.err} -o {params} -m {MIN_COV_DESMAN} -i 100 -g {wildcards.g} -s {wildcards.r} &> {log}
      """

def do_we_need_to_run_desman(wildcards) :
  freq_sel_var_file=checkpoints.Filter_Variant.get(group=wildcards.group,bin=wildcards.bin).output[0]
  nb_line=len([line for line in open(freq_sel_var_file)])
  if nb_line>1 :
    return "desman/" + wildcards.group +"/" + wildcards.bin + "/best_run.txt"
  else :
    return freq_sel_var_file

rule Is_Desman_done :
  input : do_we_need_to_run_desman
  output: touch("desman/{group}/{bin}/desman_analysis_done")
  shell :"echo Analysis done > /dev/null"


rule Desman_fit:
    input: expand("desman/{{group}}/{{Bin}}/Run_{g}_{r}/fit.txt",g=range(1,DESMAN_HAPLOTYPE_NB+1),r=range(DESMAN_REPEAT))
    output: "desman/{group}/{Bin}/Deviance.csv"
    shell : """
        cat $( ls desman/{wildcards.group}/{wildcards.Bin}/Run_*/fit.txt) | cut -d"," -f2- > {output}
        sed -i '1iH,G,LP,Dev' {output}
    """

rule Desman_plot:
    input: deviance_file="{path}/Deviance.csv",
    output: "{path}/Deviance.pdf"
    shell : """
        {DSCRIPTS}/PlotDev.R -l {wildcards.path}/Deviance.csv -o {output} 2> /dev/null
    """

rule Haplo_seqs:
    input: deviance_file="desman/{group}/{bin}/Deviance.pdf",
           bin_file = IN + "/binning/{bin}/{bin}.fasta"      
    output: "desman/{group}/{bin}/best_run.txt"
    params: "desman/{group}/{bin}"
    shell : """
        python {DSCRIPTS}/resolvenhap.py {params}/Run > {params}/best_run.txt
        
        cut -d"," -f 1 < {params}/freqs_sel_var.csv | sort | uniq | sed '1d' > {params}/coregenes.txt

        if [ ! -d {params}/haplotype_seqs ]; then 
            mkdir {params}/haplotype_seqs
        fi
        
        python {DSCRIPTS}/GetVariantsCore.py {input.bin_file} annotation/{wildcards.bin}/SCG_bed_like.tsv $(cut -d"," -f5 {params}/best_run.txt) {params}/coregenes.txt -o {params}/haplotype_seqs/
    """
    


