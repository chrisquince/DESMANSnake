Settings:
  Output files: "/mnt/gpfs/Hackathon/Test/binning/Bin_1/Bin_1.fasta.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 32
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /mnt/gpfs/Hackathon/Test/binning/Bin_4/Bin_4.fasta
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 107181
Using parameters --bmax 80386 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 80386 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 86 sample suffixes
Generating random suffixes
QSorting 86 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 86 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 12, merged 37; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 4, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 1; iterating...
Avg bucket size: 56225.5 (target: 80385)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 61
  Reserving size (80386) for bucket 1
  Calculating Z arrays for bucket 1
Getting block 2 of 61
Getting block 4 of 61
Getting block 3 of 61
  Entering block accumulator loop for bucket 1:
  Reserving size (80386) for bucket 2
  Reserving size (80386) for bucket 4
  Reserving size (80386) for bucket 3
Getting block 5 of 61
Getting block 6 of 61
Getting block 7 of 61
Getting block 8 of 61
  Reserving size (80386) for bucket 5
  Reserving size (80386) for bucket 6
  Reserving size (80386) for bucket 7
  Reserving size (80386) for bucket 8
  Calculating Z arrays for bucket 2
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 5
  Calculating Z arrays for bucket 7
  Calculating Z arrays for bucket 8
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 5:
  Entering block accumulator loop for bucket 3:
  Entering block accumulator loop for bucket 8:
  Entering block accumulator loop for bucket 7:
  Entering block accumulator loop for bucket 4:
  Entering block accumulator loop for bucket 6:
  bucket 1: 10%
  bucket 2: 10%
  bucket 5: 10%
  bucket 4: 10%
  bucket 3: 10%
  bucket 1: 20%
  bucket 7: 10%
  bucket 6: 10%
  bucket 8: 10%
  bucket 2: 20%
  bucket 5: 20%
  bucket 4: 20%
  bucket 1: 30%
  bucket 2: 30%
  bucket 5: 30%
  bucket 3: 20%
  bucket 4: 30%
  bucket 7: 20%
  bucket 6: 20%
  bucket 1: 40%
  bucket 8: 20%
  bucket 2: 40%
  bucket 5: 40%
  bucket 4: 40%
  bucket 1: 50%
  bucket 2: 50%
  bucket 3: 30%
  bucket 7: 30%
  bucket 6: 30%
  bucket 8: 30%
  bucket 1: 60%
  bucket 5: 50%
  bucket 4: 50%
  bucket 2: 60%
  bucket 1: 70%
  bucket 5: 60%
  bucket 3: 40%
  bucket 4: 60%
  bucket 7: 40%
  bucket 2: 70%
  bucket 6: 40%
  bucket 8: 40%
  bucket 1: 80%
  bucket 5: 70%
  bucket 4: 70%
  bucket 2: 80%
  bucket 1: 90%
  bucket 3: 50%
  bucket 7: 50%
  bucket 5: 80%
  bucket 6: 50%
  bucket 2: 90%
  bucket 4: 80%
  bucket 8: 50%
  bucket 1: 100%
  Sorting block of length 62567 for bucket 1
  (Using difference cover)
  bucket 2: 100%
  Sorting block of length 62367 for bucket 2
  (Using difference cover)
  bucket 5: 90%
  bucket 3: 60%
  bucket 4: 90%
  bucket 7: 60%
  bucket 6: 60%
  bucket 8: 60%
  bucket 5: 100%
  Sorting block of length 22149 for bucket 5
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 73511 for bucket 4
  (Using difference cover)
  bucket 3: 70%
  Sorting block time: 00:00:00
Returning block of 62568 for bucket 1
  Sorting block time: 00:00:00
Returning block of 22150 for bucket 5
  bucket 7: 70%
  Sorting block time: 00:00:00
Returning block of 62368 for bucket 2
  bucket 6: 70%
  bucket 8: 70%
  bucket 3: 80%
  bucket 7: 80%
Getting block 9 of 61
  Reserving size (80386) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 6: 80%
  Sorting block time: 00:00:00
Returning block of 73512 for bucket 4
Getting block 10 of 61
  Reserving size (80386) for bucket 10
  Calculating Z arrays for bucket 10
  Entering block accumulator loop for bucket 10:
  bucket 8: 80%
  bucket 3: 90%
Getting block 11 of 61
  Reserving size (80386) for bucket 11
  Calculating Z arrays for bucket 11
  Entering block accumulator loop for bucket 11:
  bucket 9: 10%
  bucket 10: 10%
  bucket 7: 90%
  bucket 6: 90%
  bucket 11: 10%
  bucket 8: 90%
Getting block 12 of 61
  Reserving size (80386) for bucket 12
  Calculating Z arrays for bucket 12
  Entering block accumulator loop for bucket 12:
  bucket 9: 20%
  bucket 10: 20%
  bucket 3: 100%
  Sorting block of length 69104 for bucket 3
  (Using difference cover)
  bucket 7: 100%
  Sorting block of length 47129 for bucket 7
  (Using difference cover)
  bucket 11: 20%
  bucket 10: 30%
  bucket 6: 100%
  bucket 9: 30%
  Sorting block of length 58979 for bucket 6
  (Using difference cover)
  bucket 8: 100%
  Sorting block of length 74405 for bucket 8
  (Using difference cover)
  bucket 12: 10%
  bucket 11: 30%
  bucket 10: 40%
  bucket 9: 40%
  bucket 12: 20%
  bucket 11: 40%
  Sorting block time: 00:00:00
Returning block of 47130 for bucket 7
  bucket 10: 50%
  bucket 9: 50%
  Sorting block time: 00:00:00
Returning block of 69105 for bucket 3
  bucket 11: 50%
  bucket 10: 60%
  Sorting block time: 00:00:00
Returning block of 58980 for bucket 6
  bucket 12: 30%
  Sorting block time: 00:00:00
Returning block of 74406 for bucket 8
  bucket 9: 60%
Getting block 13 of 61
  Reserving size (80386) for bucket 13
  Calculating Z arrays for bucket 13
  Entering block accumulator loop for bucket 13:
  bucket 11: 60%
  bucket 10: 70%
  bucket 12: 40%
  bucket 9: 70%
Getting block 14 of 61
  Reserving size (80386) for bucket 14
  Calculating Z arrays for bucket 14
  Entering block accumulator loop for bucket 14:
  bucket 11: 70%
  bucket 10: 80%
  bucket 13: 10%
Getting block 15 of 61
  Reserving size (80386) for bucket 15
  Calculating Z arrays for bucket 15
  Entering block accumulator loop for bucket 15:
Getting block 16 of 61
  Reserving size (80386) for bucket 16
  Calculating Z arrays for bucket 16
  Entering block accumulator loop for bucket 16:
  bucket 9: 80%
  bucket 12: 50%
  bucket 11: 80%
  bucket 10: 90%
  bucket 14: 10%
  bucket 13: 20%
  bucket 15: 10%
  bucket 9: 90%
  bucket 16: 10%
  bucket 11: 90%
  bucket 10: 100%
  Sorting block of length 70058 for bucket 10
  (Using difference cover)
  bucket 12: 60%
  bucket 14: 20%
  bucket 13: 30%
  bucket 15: 20%
  bucket 9: 100%
  Sorting block of length 68814 for bucket 9
  (Using difference cover)
  bucket 11: 100%
  Sorting block of length 16083 for bucket 11
  (Using difference cover)
  bucket 16: 20%
  Sorting block time: 00:00:00
Returning block of 16084 for bucket 11
  bucket 12: 70%
  bucket 13: 40%
  bucket 14: 30%
  bucket 15: 30%
  bucket 16: 30%
  Sorting block time: 00:00:00
Returning block of 70059 for bucket 10
Getting block 17 of 61
  Reserving size (80386) for bucket 17
  Calculating Z arrays for bucket 17
  Entering block accumulator loop for bucket 17:
  bucket 12: 80%
  bucket 13: 50%
  bucket 14: 40%
  Sorting block time: 00:00:00
Returning block of 68815 for bucket 9
  bucket 15: 40%
  bucket 16: 40%
  bucket 17: 10%
  bucket 13: 60%
  bucket 12: 90%
Getting block 18 of 61
  Reserving size (80386) for bucket 18
  Calculating Z arrays for bucket 18
  Entering block accumulator loop for bucket 18:
  bucket 14: 50%
  bucket 16: 50%
  bucket 15: 50%
Getting block 19 of 61
  Reserving size (80386) for bucket 19
  Calculating Z arrays for bucket 19
  Entering block accumulator loop for bucket 19:
  bucket 17: 20%
  bucket 13: 70%
  bucket 18: 10%
  bucket 12: 100%
  Sorting block of length 74043 for bucket 12
  (Using difference cover)
  bucket 14: 60%
  bucket 16: 60%
  bucket 15: 60%
  bucket 19: 10%
  bucket 17: 30%
  bucket 13: 80%
  bucket 18: 20%
  bucket 16: 70%
  bucket 14: 70%
  bucket 15: 70%
  bucket 13: 90%
  bucket 19: 20%
  bucket 17: 40%
  Sorting block time: 00:00:00
Returning block of 74044 for bucket 12
  bucket 18: 30%
  bucket 16: 80%
  bucket 14: 80%
  bucket 15: 80%
  bucket 13: 100%
  Sorting block of length 36084 for bucket 13
  (Using difference cover)
  bucket 19: 30%
  bucket 18: 40%
  bucket 16: 90%
  bucket 17: 50%
  bucket 14: 90%
Getting block 20 of 61
  Reserving size (80386) for bucket 20
  Calculating Z arrays for bucket 20
  Entering block accumulator loop for bucket 20:
  bucket 15: 90%
  Sorting block time: 00:00:00
Returning block of 36085 for bucket 13
  bucket 16: 100%
  Sorting block of length 19923 for bucket 16
  (Using difference cover)
  bucket 18: 50%
  bucket 19: 40%
  bucket 17: 60%
  Sorting block time: 00:00:00
Returning block of 19924 for bucket 16
  bucket 14: 100%
  Sorting block of length 65993 for bucket 14
  (Using difference cover)
  bucket 20: 10%
  bucket 18: 60%
Getting block 21 of 61
  Reserving size (80386) for bucket 21
  Calculating Z arrays for bucket 21
  Entering block accumulator loop for bucket 21:
  bucket 15: 100%
  Sorting block of length 78411 for bucket 15
  (Using difference cover)
  bucket 17: 70%
  bucket 19: 50%
Getting block 22 of 61
  Reserving size (80386) for bucket 22
  Calculating Z arrays for bucket 22
  Entering block accumulator loop for bucket 22:
  bucket 20: 20%
  bucket 18: 70%
  Sorting block time: 00:00:00
Returning block of 65994 for bucket 14
  bucket 21: 10%
  bucket 17: 80%
  bucket 19: 60%
  bucket 22: 10%
  bucket 20: 30%
  bucket 18: 80%
  bucket 21: 20%
  bucket 17: 90%
  bucket 19: 70%
Getting block 23 of 61
  Reserving size (80386) for bucket 23
  Calculating Z arrays for bucket 23
  Entering block accumulator loop for bucket 23:
  bucket 22: 20%
  Sorting block time: 00:00:00
Returning block of 78412 for bucket 15
  bucket 20: 40%
  bucket 18: 90%
  bucket 17: 100%
  Sorting block of length 69154 for bucket 17
  (Using difference cover)
  bucket 19: 80%
  bucket 21: 30%
  bucket 23: 10%
  bucket 22: 30%
  bucket 18: 100%
  Sorting block of length 34563 for bucket 18
  (Using difference cover)
  bucket 20: 50%
Getting block 24 of 61
  Reserving size (80386) for bucket 24
  Calculating Z arrays for bucket 24
  Entering block accumulator loop for bucket 24:
  bucket 19: 90%
  bucket 21: 40%
  bucket 23: 20%
  Sorting block time: 00:00:00
Returning block of 34564 for bucket 18
  bucket 22: 40%
  bucket 20: 60%
  Sorting block time: 00:00:00
Returning block of 69155 for bucket 17
  bucket 19: 100%
  Sorting block of length 63323 for bucket 19
  (Using difference cover)
  bucket 24: 10%
Getting block 25 of 61
  Reserving size (80386) for bucket 25
  Calculating Z arrays for bucket 25
  Entering block accumulator loop for bucket 25:
  bucket 21: 50%
  bucket 23: 30%
  bucket 22: 50%
  bucket 20: 70%
Getting block 26 of 61
  Reserving size (80386) for bucket 26
  Calculating Z arrays for bucket 26
  Entering block accumulator loop for bucket 26:
  bucket 25: 10%
  bucket 21: 60%
  bucket 23: 40%
  bucket 20: 80%
  bucket 22: 60%
  Sorting block time: 00:00:00
Returning block of 63324 for bucket 19
  bucket 24: 20%
  bucket 26: 10%
  bucket 25: 20%
  bucket 23: 50%
  bucket 21: 70%
  bucket 20: 90%
  bucket 22: 70%
Getting block 27 of 61
  Reserving size (80386) for bucket 27
  Calculating Z arrays for bucket 27
  Entering block accumulator loop for bucket 27:
  bucket 24: 30%
  bucket 26: 20%
  bucket 25: 30%
  bucket 20: 100%
  Sorting block of length 66583 for bucket 20
  (Using difference cover)
  bucket 22: 80%
  bucket 23: 60%
  bucket 21: 80%
  bucket 27: 10%
  bucket 25: 40%
  bucket 26: 30%
  bucket 22: 90%
  bucket 23: 70%
  bucket 24: 40%
  bucket 21: 90%
  Sorting block time: 00:00:00
Returning block of 66584 for bucket 20
  bucket 27: 20%
  bucket 25: 50%
  bucket 26: 40%
  bucket 22: 100%
  Sorting block of length 46487 for bucket 22
  (Using difference cover)
  bucket 21: 100%
  Sorting block of length 56362 for bucket 21
  (Using difference cover)
  bucket 23: 80%
  bucket 24: 50%
Getting block 28 of 61
  Reserving size (80386) for bucket 28
  Calculating Z arrays for bucket 28
  Entering block accumulator loop for bucket 28:
  bucket 27: 30%
  bucket 25: 60%
  bucket 26: 50%
  Sorting block time: 00:00:00
Returning block of 46488 for bucket 22
  bucket 23: 90%
  Sorting block time: 00:00:00
Returning block of 56363 for bucket 21
  bucket 28: 10%
  bucket 25: 70%
  bucket 26: 60%
  bucket 27: 40%
  bucket 24: 60%
  bucket 23: 100%
  Sorting block of length 63689 for bucket 23
  (Using difference cover)
Getting block 29 of 61
  Reserving size (80386) for bucket 29
  Calculating Z arrays for bucket 29
  Entering block accumulator loop for bucket 29:
  bucket 25: 80%
  bucket 28: 20%
  bucket 26: 70%
  bucket 27: 50%
Getting block 30 of 61
  Reserving size (80386) for bucket 30
  Calculating Z arrays for bucket 30
  Entering block accumulator loop for bucket 30:
  bucket 29: 10%
  bucket 24: 70%
  bucket 25: 90%
  Sorting block time: 00:00:00
Returning block of 63690 for bucket 23
  bucket 26: 80%
  bucket 28: 30%
  bucket 27: 60%
  bucket 30: 10%
  bucket 29: 20%
  bucket 25: 100%
  Sorting block of length 9614 for bucket 25
  (Using difference cover)
  bucket 26: 90%
  bucket 28: 40%
  bucket 24: 80%
  Sorting block time: 00:00:00
Returning block of 9615 for bucket 25
  bucket 27: 70%
  bucket 30: 20%
Getting block 31 of 61
  Reserving size (80386) for bucket 31
  Calculating Z arrays for bucket 31
  Entering block accumulator loop for bucket 31:
  bucket 29: 30%
  bucket 26: 100%
  Sorting block of length 81822 for bucket 26
  (Using difference cover)
  bucket 28: 50%
Getting block 32 of 61
  Reserving size (80386) for bucket 32
  Calculating Z arrays for bucket 32
  Entering block accumulator loop for bucket 32:
  bucket 27: 80%
  bucket 30: 30%
  bucket 24: 90%
  bucket 31: 10%
  bucket 29: 40%
  bucket 28: 60%
  bucket 32: 10%
  bucket 27: 90%
  bucket 30: 40%
  bucket 24: 100%
  Sorting block of length 77778 for bucket 24
  (Using difference cover)
  bucket 31: 20%
  bucket 29: 50%
  Sorting block time: 00:00:00
Returning block of 81823 for bucket 26
  bucket 28: 70%
  bucket 32: 20%
  bucket 27: 100%
  Sorting block of length 46801 for bucket 27
  (Using difference cover)
  bucket 30: 50%
  bucket 29: 60%
  bucket 31: 30%
  bucket 28: 80%
  bucket 32: 30%
  Sorting block time: 00:00:00
Returning block of 46802 for bucket 27
  bucket 30: 60%
  Sorting block time: 00:00:00
Returning block of 77779 for bucket 24
  bucket 29: 70%
  bucket 32: 40%
  bucket 28: 90%
  bucket 31: 40%
  bucket 30: 70%
Getting block 33 of 61
  Reserving size (80386) for bucket 33
  Calculating Z arrays for bucket 33
  Entering block accumulator loop for bucket 33:
Getting block 34 of 61
  Reserving size (80386) for bucket 34
  Calculating Z arrays for bucket 34
  Entering block accumulator loop for bucket 34:
  bucket 32: 50%
  bucket 29: 80%
  bucket 28: 100%
  Sorting block of length 36793 for bucket 28
  (Using difference cover)
Getting block 35 of 61
  Reserving size (80386) for bucket 35
  Calculating Z arrays for bucket 35
  Entering block accumulator loop for bucket 35:
  bucket 31: 50%
  bucket 30: 80%
  bucket 33: 10%
  bucket 34: 10%
  bucket 32: 60%
  Sorting block time: 00:00:00
Returning block of 36794 for bucket 28
  bucket 29: 90%
  bucket 35: 10%
  bucket 33: 20%
  bucket 31: 60%
  bucket 30: 90%
  bucket 32: 70%
  bucket 34: 20%
Getting block 36 of 61
  Reserving size (80386) for bucket 36
  Calculating Z arrays for bucket 36
  Entering block accumulator loop for bucket 36:
  bucket 29: 100%
  Sorting block of length 65571 for bucket 29
  (Using difference cover)
  bucket 33: 30%
  bucket 32: 80%
  bucket 35: 20%
  bucket 30: 100%
  Sorting block of length 27328 for bucket 30
  (Using difference cover)
  bucket 31: 70%
  bucket 34: 30%
  bucket 36: 10%
  Sorting block time: 00:00:00
Returning block of 27329 for bucket 30
  bucket 33: 40%
  bucket 32: 90%
  Sorting block time: 00:00:00
Returning block of 65572 for bucket 29
  bucket 35: 30%
  bucket 34: 40%
  bucket 31: 80%
  bucket 33: 50%
Getting block 37 of 61
  Reserving size (80386) for bucket 37
  Calculating Z arrays for bucket 37
  Entering block accumulator loop for bucket 37:
  bucket 32: 100%
  Sorting block of length 70467 for bucket 32
  (Using difference cover)
  bucket 36: 20%
  bucket 35: 40%
  bucket 34: 50%
Getting block 38 of 61
  Reserving size (80386) for bucket 38
  Calculating Z arrays for bucket 38
  bucket 33: 60%
  Entering block accumulator loop for bucket 38:
  bucket 31: 90%
  bucket 36: 30%
  bucket 37: 10%
  Sorting block time: 00:00:00
Returning block of 70468 for bucket 32
  bucket 33: 70%
  bucket 34: 60%
  bucket 35: 50%
  bucket 38: 10%
  bucket 31: 100%
  Sorting block of length 61055 for bucket 31
  (Using difference cover)
  bucket 36: 40%
  bucket 37: 20%
  bucket 33: 80%
Getting block 39 of 61
  Reserving size (80386) for bucket 39
  Calculating Z arrays for bucket 39
  Entering block accumulator loop for bucket 39:
  bucket 34: 70%
  bucket 35: 60%
  bucket 38: 20%
  bucket 33: 90%
  bucket 36: 50%
  Sorting block time: 00:00:00
Returning block of 61056 for bucket 31
  bucket 39: 10%
  bucket 37: 30%
  bucket 34: 80%
  bucket 35: 70%
  bucket 38: 30%
  bucket 33: 100%
  Sorting block of length 68639 for bucket 33
  (Using difference cover)
  bucket 39: 20%
  bucket 36: 60%
Getting block 40 of 61
  Reserving size (80386) for bucket 40
  Calculating Z arrays for bucket 40
  Entering block accumulator loop for bucket 40:
  bucket 34: 90%
  bucket 37: 40%
  bucket 35: 80%
  bucket 38: 40%
  bucket 39: 30%
  Sorting block time: 00:00:00
Returning block of 68640 for bucket 33
  bucket 36: 70%
  bucket 40: 10%
  bucket 34: 100%
  Sorting block of length 36064 for bucket 34
  (Using difference cover)
  bucket 37: 50%
  bucket 35: 90%
  bucket 39: 40%
  bucket 38: 50%
Getting block 41 of 61
  Reserving size (80386) for bucket 41
  Calculating Z arrays for bucket 41
  Entering block accumulator loop for bucket 41:
  Sorting block time: 00:00:00
Returning block of 36065 for bucket 34
  bucket 40: 20%
  bucket 36: 80%
  bucket 39: 50%
  bucket 37: 60%
  bucket 35: 100%
  Sorting block of length 48773 for bucket 35
  (Using difference cover)
  bucket 38: 60%
Getting block 42 of 61
  Reserving size (80386) for bucket 42
  Calculating Z arrays for bucket 42
  Entering block accumulator loop for bucket 42:
  bucket 41: 10%
  bucket 40: 30%
  bucket 36: 90%
  bucket 39: 60%
  bucket 37: 70%
  Sorting block time: 00:00:00
Returning block of 48774 for bucket 35
  bucket 38: 70%
  bucket 41: 20%
  bucket 42: 10%
  bucket 40: 40%
  bucket 36: 100%
  Sorting block of length 58057 for bucket 36
  (Using difference cover)
  bucket 39: 70%
  bucket 41: 30%
Getting block 43 of 61
  Reserving size (80386) for bucket 43
  Calculating Z arrays for bucket 43
  Entering block accumulator loop for bucket 43:
  bucket 38: 80%
  bucket 37: 80%
  bucket 42: 20%
  bucket 40: 50%
  bucket 39: 80%
  Sorting block time: 00:00:00
Returning block of 58058 for bucket 36
  bucket 43: 10%
  bucket 41: 40%
  bucket 38: 90%
  bucket 42: 30%
  bucket 37: 90%
  bucket 39: 90%
  bucket 40: 60%
  bucket 43: 20%
  bucket 41: 50%
Getting block 44 of 61
  Reserving size (80386) for bucket 44
  Calculating Z arrays for bucket 44
  Entering block accumulator loop for bucket 44:
  bucket 38: 100%
  Sorting block of length 36404 for bucket 38
  (Using difference cover)
  bucket 39: 100%
  Sorting block of length 59919 for bucket 39
  (Using difference cover)
  bucket 42: 40%
  bucket 40: 70%
  bucket 37: 100%
  Sorting block of length 76438 for bucket 37
  (Using difference cover)
  bucket 43: 30%
  bucket 41: 60%
  bucket 44: 10%
  Sorting block time: 00:00:00
Returning block of 36405 for bucket 38
  bucket 43: 40%
  bucket 41: 70%
  bucket 40: 80%
  Sorting block time: 00:00:00
Returning block of 59920 for bucket 39
  bucket 42: 50%
Getting block 45 of 61
  Reserving size (80386) for bucket 45
  Calculating Z arrays for bucket 45
  Entering block accumulator loop for bucket 45:
  Sorting block time: 00:00:00
Returning block of 76439 for bucket 37
  bucket 44: 20%
  bucket 43: 50%
  bucket 41: 80%
  bucket 40: 90%
Getting block 46 of 61
  Reserving size (80386) for bucket 46
  Calculating Z arrays for bucket 46
  Entering block accumulator loop for bucket 46:
  bucket 42: 60%
  bucket 43: 60%
  bucket 45: 10%
  bucket 44: 30%
  bucket 41: 90%
Getting block 47 of 61
  Reserving size (80386) for bucket 47
  Calculating Z arrays for bucket 47
  Entering block accumulator loop for bucket 47:
  bucket 40: 100%
  Sorting block of length 37488 for bucket 40
  (Using difference cover)
  bucket 46: 10%
  bucket 43: 70%
  bucket 42: 70%
  bucket 45: 20%
  Sorting block time: 00:00:00
  bucket 47: 10%
Returning block of 37489 for bucket 40
  bucket 41: 100%
  Sorting block of length 57889 for bucket 41
  (Using difference cover)
  bucket 44: 40%
  bucket 46: 20%
  bucket 43: 80%
  bucket 42: 80%
  bucket 47: 20%
  bucket 45: 30%
  bucket 46: 30%
  Sorting block time: 00:00:00
Returning block of 57890 for bucket 41
  bucket 44: 50%
  bucket 43: 90%
  bucket 47: 30%
  bucket 46: 40%
  bucket 42: 90%
  bucket 45: 40%
  bucket 43: 100%
  Sorting block of length 13332 for bucket 43
  (Using difference cover)
  bucket 44: 60%
  Sorting block time: 00:00:00
Returning block of 13333 for bucket 43
  bucket 47: 40%
  bucket 46: 50%
  bucket 42: 100%
  Sorting block of length 78396 for bucket 42
  (Using difference cover)
  bucket 45: 50%
  bucket 44: 70%
  bucket 47: 50%
  bucket 46: 60%
  bucket 45: 60%
  bucket 44: 80%
  bucket 46: 70%
  bucket 47: 60%
  Sorting block time: 00:00:00
Returning block of 78397 for bucket 42
  bucket 44: 90%
  bucket 45: 70%
  bucket 46: 80%
  bucket 47: 70%
  bucket 44: 100%
  Sorting block of length 78477 for bucket 44
  (Using difference cover)
  bucket 45: 80%
  bucket 46: 90%
  bucket 47: 80%
  bucket 45: 90%
  bucket 46: 100%
  Sorting block of length 39313 for bucket 46
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 78478 for bucket 44
  bucket 47: 90%
  bucket 45: 100%
  Sorting block of length 67089 for bucket 45
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 39314 for bucket 46
  bucket 47: 100%
  Sorting block of length 26546 for bucket 47
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67090 for bucket 45
Getting block 48 of 61
  Reserving size (80386) for bucket 48
  Calculating Z arrays for bucket 48
  Sorting block time: 00:00:00
Returning block of 26547 for bucket 47
  Entering block accumulator loop for bucket 48:
Getting block 49 of 61
  Reserving size (80386) for bucket 49
  Calculating Z arrays for bucket 49
  Entering block accumulator loop for bucket 49:
  bucket 48: 10%
Getting block 50 of 61
  Reserving size (80386) for bucket 50
  Calculating Z arrays for bucket 50
  Entering block accumulator loop for bucket 50:
  bucket 49: 10%
Getting block 51 of 61
  Reserving size (80386) for bucket 51
  Calculating Z arrays for bucket 51
  Entering block accumulator loop for bucket 51:
  bucket 48: 20%
Getting block 52 of 61
  Reserving size (80386) for bucket 52
  Calculating Z arrays for bucket 52
  Entering block accumulator loop for bucket 52:
  bucket 50: 10%
Getting block 53 of 61
  Reserving size (80386) for bucket 53
  Calculating Z arrays for bucket 53
  Entering block accumulator loop for bucket 53:
Getting block 54 of 61
  Reserving size (80386) for bucket 54
  Calculating Z arrays for bucket 54
  Entering block accumulator loop for bucket 54:
  bucket 49: 20%
Getting block 55 of 61
  Reserving size (80386) for bucket 55
  Calculating Z arrays for bucket 55
  Entering block accumulator loop for bucket 55:
  bucket 51: 10%
  bucket 52: 10%
  bucket 48: 30%
  bucket 53: 10%
  bucket 50: 20%
  bucket 49: 30%
  bucket 54: 10%
  bucket 55: 10%
  bucket 52: 20%
  bucket 48: 40%
  bucket 51: 20%
  bucket 53: 20%
  bucket 49: 40%
  bucket 50: 30%
  bucket 54: 20%
  bucket 52: 30%
  bucket 55: 20%
  bucket 49: 50%
  bucket 48: 50%
  bucket 53: 30%
  bucket 51: 30%
  bucket 52: 40%
  bucket 54: 30%
  bucket 55: 30%
  bucket 50: 40%
  bucket 49: 60%
  bucket 53: 40%
  bucket 48: 60%
  bucket 51: 40%
  bucket 52: 50%
  bucket 54: 40%
  bucket 55: 40%
  bucket 49: 70%
  bucket 50: 50%
  bucket 53: 50%
  bucket 48: 70%
  bucket 52: 60%
  bucket 51: 50%
  bucket 49: 80%
  bucket 55: 50%
  bucket 54: 50%
  bucket 53: 60%
  bucket 50: 60%
  bucket 52: 70%
  bucket 48: 80%
  bucket 49: 90%
  bucket 51: 60%
  bucket 55: 60%
  bucket 54: 60%
  bucket 53: 70%
  bucket 52: 80%
  bucket 48: 90%
  bucket 49: 100%
  Sorting block of length 12688 for bucket 49
  (Using difference cover)
  bucket 50: 70%
  Sorting block time: 00:00:00
Returning block of 12689 for bucket 49
  bucket 55: 70%
  bucket 51: 70%
  bucket 54: 70%
  bucket 52: 90%
  bucket 53: 80%
Getting block 56 of 61
  Reserving size (80386) for bucket 56
  Calculating Z arrays for bucket 56
  Entering block accumulator loop for bucket 56:
  bucket 48: 100%
  Sorting block of length 58559 for bucket 48
  (Using difference cover)
  bucket 50: 80%
  bucket 55: 80%
  bucket 52: 100%
  Sorting block of length 52860 for bucket 52
  (Using difference cover)
  bucket 51: 80%
  bucket 54: 80%
  bucket 53: 90%
  bucket 56: 10%
  Sorting block time: 00:00:00
Returning block of 58560 for bucket 48
  bucket 56: 20%
  bucket 50: 90%
  bucket 55: 90%
  Sorting block time: 00:00:00
Returning block of 52861 for bucket 52
  bucket 53: 100%
  Sorting block of length 72179 for bucket 53
  (Using difference cover)
  bucket 51: 90%
  bucket 54: 90%
  bucket 56: 30%
Getting block 57 of 61
  Reserving size (80386) for bucket 57
  Calculating Z arrays for bucket 57
  Entering block accumulator loop for bucket 57:
  bucket 50: 100%
  Sorting block of length 74755 for bucket 50
  (Using difference cover)
Getting block 58 of 61
  Reserving size (80386) for bucket 58
  Calculating Z arrays for bucket 58
  Entering block accumulator loop for bucket 58:
  bucket 55: 100%
  Sorting block of length 61778 for bucket 55
  (Using difference cover)
  bucket 51: 100%
  Sorting block of length 66017 for bucket 51
  (Using difference cover)
  bucket 54: 100%
  Sorting block of length 79338 for bucket 54
  (Using difference cover)
  bucket 56: 40%
  Sorting block time: 00:00:00
Returning block of 72180 for bucket 53
  bucket 57: 10%
  bucket 58: 10%
  bucket 56: 50%
  Sorting block time: 00:00:00
Returning block of 74756 for bucket 50
  Sorting block time: 00:00:00
Returning block of 61779 for bucket 55
  Sorting block time: 00:00:00
Returning block of 66018 for bucket 51
  bucket 57: 20%
  bucket 58: 20%
Getting block 59 of 61
  Reserving size (80386) for bucket 59
  Calculating Z arrays for bucket 59
  Entering block accumulator loop for bucket 59:
  Sorting block time: 00:00:00
Returning block of 79339 for bucket 54
  bucket 56: 60%
  bucket 58: 30%
Getting block 60 of 61
  Reserving size (80386) for bucket 60
  Calculating Z arrays for bucket 60
  Entering block accumulator loop for bucket 60:
  bucket 57: 30%
Getting block 61 of 61
  Reserving size (80386) for bucket 61
  Calculating Z arrays for bucket 61
  Entering block accumulator loop for bucket 61:
  bucket 59: 10%
  bucket 56: 70%
  bucket 61: 10%
  bucket 58: 40%
  bucket 60: 10%
  bucket 56: 80%
  bucket 57: 40%
  bucket 59: 20%
  bucket 61: 20%
  bucket 58: 50%
  bucket 56: 90%
  bucket 61: 30%
  bucket 60: 20%
  bucket 57: 50%
  bucket 59: 30%
  bucket 58: 60%
  bucket 61: 40%
  bucket 56: 100%
  Sorting block of length 55344 for bucket 56
  (Using difference cover)
  bucket 57: 60%
  bucket 60: 30%
  bucket 61: 50%
  bucket 59: 40%
  bucket 58: 70%
  Sorting block time: 00:00:00
Returning block of 55345 for bucket 56
  bucket 61: 60%
  bucket 57: 70%
  bucket 58: 80%
  bucket 60: 40%
  bucket 59: 50%
  bucket 61: 70%
  bucket 58: 90%
  bucket 57: 80%
  bucket 60: 50%
  bucket 61: 80%
  bucket 59: 60%
  bucket 61: 90%
  bucket 58: 100%
  Sorting block of length 70538 for bucket 58
  (Using difference cover)
  bucket 57: 90%
  bucket 60: 60%
  bucket 59: 70%
  bucket 61: 100%
  Sorting block of length 68653 for bucket 61
  (Using difference cover)
  bucket 57: 100%
  Sorting block of length 58970 for bucket 57
  (Using difference cover)
  bucket 59: 80%
  bucket 60: 70%
  Sorting block time: 00:00:00
Returning block of 70539 for bucket 58
  bucket 60: 80%
  bucket 59: 90%
  Sorting block time: 00:00:01
Returning block of 68654 for bucket 61
  Sorting block time: 00:00:01
Returning block of 58971 for bucket 57
  bucket 60: 90%
  bucket 59: 100%
  Sorting block of length 62153 for bucket 59
  (Using difference cover)
  bucket 60: 100%
  Sorting block of length 76090 for bucket 60
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 62154 for bucket 59
  Sorting block time: 00:00:00
Returning block of 76091 for bucket 60
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 633113
fchr[G]: 1702357
fchr[T]: 2787451
fchr[$]: 3429816
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 5346225 bytes to primary EBWT file: /mnt/gpfs/Hackathon/Test/binning/Bin_1/Bin_1.fasta.1.bt2
Wrote 857460 bytes to secondary EBWT file: /mnt/gpfs/Hackathon/Test/binning/Bin_1/Bin_1.fasta.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 3429816
    bwtLen: 3429817
    sz: 857454
    bwtSz: 857455
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 214364
    offsSz: 857456
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 17864
    numLines: 17864
    ebwtTotLen: 1143296
    ebwtTotSz: 1143296
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:02
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 107181
Using parameters --bmax 80386 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 80386 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 86 sample suffixes
Generating random suffixes
QSorting 86 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 86 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 14, merged 35; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 6, merged 9; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Avg bucket size: 57162.6 (target: 80385)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 60
  Reserving size (80386) for bucket 1
Getting block 2 of 60
Getting block 4 of 60
Getting block 3 of 60
Getting block 5 of 60
  Calculating Z arrays for bucket 1
  Reserving size (80386) for bucket 2
  Reserving size (80386) for bucket 4
  Reserving size (80386) for bucket 3
Getting block 6 of 60
Getting block 7 of 60
Getting block 8 of 60
  Reserving size (80386) for bucket 5
  Entering block accumulator loop for bucket 1:
  Reserving size (80386) for bucket 6
  Reserving size (80386) for bucket 7
  Reserving size (80386) for bucket 8
  Calculating Z arrays for bucket 2
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 5
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 7
  Calculating Z arrays for bucket 8
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 5:
  Entering block accumulator loop for bucket 3:
  Entering block accumulator loop for bucket 8:
  Entering block accumulator loop for bucket 7:
  Entering block accumulator loop for bucket 4:
  Entering block accumulator loop for bucket 6:
  bucket 1: 10%
  bucket 3: 10%
  bucket 2: 10%
  bucket 7: 10%
  bucket 8: 10%
  bucket 6: 10%
  bucket 5: 10%
  bucket 4: 10%
  bucket 1: 20%
  bucket 3: 20%
  bucket 2: 20%
  bucket 7: 20%
  bucket 8: 20%
  bucket 1: 30%
  bucket 6: 20%
  bucket 5: 20%
  bucket 3: 30%
  bucket 4: 20%
  bucket 2: 30%
  bucket 1: 40%
  bucket 7: 30%
  bucket 8: 30%
  bucket 3: 40%
  bucket 6: 30%
  bucket 5: 30%
  bucket 1: 50%
  bucket 2: 40%
  bucket 4: 30%
  bucket 3: 50%
  bucket 7: 40%
  bucket 8: 40%
  bucket 1: 60%
  bucket 6: 40%
  bucket 5: 40%
  bucket 2: 50%
  bucket 3: 60%
  bucket 1: 70%
  bucket 7: 50%
  bucket 4: 40%
  bucket 8: 50%
  bucket 3: 70%
  bucket 6: 50%
  bucket 2: 60%
  bucket 5: 50%
  bucket 1: 80%
  bucket 7: 60%
  bucket 3: 80%
  bucket 8: 60%
  bucket 4: 50%
  bucket 1: 90%
  bucket 2: 70%
  bucket 6: 60%
  bucket 5: 60%
  bucket 3: 90%
  bucket 7: 70%
  bucket 1: 100%
  Sorting block of length 22918 for bucket 1
  (Using difference cover)
  bucket 8: 70%
  bucket 2: 80%
  bucket 4: 60%
  bucket 3: 100%
  Sorting block of length 29373 for bucket 3
  (Using difference cover)
  bucket 6: 70%
  Sorting block time: 00:00:00
Returning block of 22919 for bucket 1
  bucket 5: 70%
  bucket 7: 80%
  bucket 2: 90%
  bucket 8: 80%
  bucket 4: 70%
  Sorting block time: 00:00:00
Returning block of 29374 for bucket 3
  bucket 6: 80%
  bucket 7: 90%
  bucket 5: 80%
  bucket 2: 100%
  Sorting block of length 78949 for bucket 2
  (Using difference cover)
  bucket 8: 90%
Getting block 9 of 60
  Reserving size (80386) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 4: 80%
  bucket 6: 90%
  bucket 7: 100%
  Sorting block of length 37869 for bucket 7
  (Using difference cover)
  bucket 5: 90%
Getting block 10 of 60
  bucket 8: 100%
  Reserving size (80386) for bucket 10
  Sorting block of length 60931 for bucket 8
  Calculating Z arrays for bucket 10
  (Using difference cover)
  Entering block accumulator loop for bucket 10:
  bucket 9: 10%
  bucket 4: 90%
  bucket 6: 100%
  Sorting block of length 72801 for bucket 6
  (Using difference cover)
  bucket 5: 100%
  Sorting block of length 70893 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 37870 for bucket 7
  bucket 10: 10%
  bucket 9: 20%
  Sorting block time: 00:00:00
Returning block of 78950 for bucket 2
  bucket 4: 100%
  Sorting block of length 67723 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60932 for bucket 8
  bucket 10: 20%
  bucket 9: 30%
Getting block 11 of 60
  Reserving size (80386) for bucket 11
  Calculating Z arrays for bucket 11
  Entering block accumulator loop for bucket 11:
  Sorting block time: 00:00:00
  bucket 10: 30%
Returning block of 72802 for bucket 6
  bucket 9: 40%
  Sorting block time: 00:00:00
Returning block of 70894 for bucket 5
  bucket 11: 10%
Getting block 12 of 60
  Reserving size (80386) for bucket 12
  Calculating Z arrays for bucket 12
  Entering block accumulator loop for bucket 12:
Getting block 13 of 60
  Reserving size (80386) for bucket 13
  Calculating Z arrays for bucket 13
  Entering block accumulator loop for bucket 13:
  bucket 10: 40%
  bucket 9: 50%
  bucket 11: 20%
  Sorting block time: 00:00:00
Returning block of 67724 for bucket 4
  bucket 13: 10%
  bucket 12: 10%
  bucket 10: 50%
  bucket 9: 60%
Getting block 14 of 60
  Reserving size (80386) for bucket 14
  Calculating Z arrays for bucket 14
  Entering block accumulator loop for bucket 14:
  bucket 11: 30%
Getting block 15 of 60
  Reserving size (80386) for bucket 15
  Calculating Z arrays for bucket 15
  Entering block accumulator loop for bucket 15:
  bucket 13: 20%
  bucket 10: 60%
  bucket 9: 70%
  bucket 12: 20%
  bucket 11: 40%
  bucket 14: 10%
  bucket 15: 10%
Getting block 16 of 60
  Reserving size (80386) for bucket 16
  Calculating Z arrays for bucket 16
  Entering block accumulator loop for bucket 16:
  bucket 10: 70%
  bucket 9: 80%
  bucket 13: 30%
  bucket 11: 50%
  bucket 12: 30%
  bucket 14: 20%
  bucket 15: 20%
  bucket 10: 80%
  bucket 9: 90%
  bucket 16: 10%
  bucket 11: 60%
  bucket 13: 40%
  bucket 14: 30%
  bucket 12: 40%
  bucket 10: 90%
  bucket 15: 30%
  bucket 9: 100%
  Sorting block of length 60037 for bucket 9
  (Using difference cover)
  bucket 11: 70%
  bucket 16: 20%
  bucket 13: 50%
  bucket 10: 100%
  Sorting block of length 49656 for bucket 10
  (Using difference cover)
  bucket 15: 40%
  bucket 14: 40%
  bucket 12: 50%
  bucket 11: 80%
  bucket 16: 30%
  bucket 13: 60%
  Sorting block time: 00:00:00
Returning block of 60038 for bucket 9
  bucket 11: 90%
  bucket 15: 50%
  bucket 14: 50%
  bucket 12: 60%
  Sorting block time: 00:00:00
Returning block of 49657 for bucket 10
  bucket 13: 70%
  bucket 16: 40%
  bucket 11: 100%
  Sorting block of length 64013 for bucket 11
  (Using difference cover)
  bucket 15: 60%
  bucket 14: 60%
  bucket 12: 70%
  bucket 13: 80%
  bucket 16: 50%
Getting block 17 of 60
  Reserving size (80386) for bucket 17
  Calculating Z arrays for bucket 17
  Entering block accumulator loop for bucket 17:
Getting block 18 of 60
  Reserving size (80386) for bucket 18
  Calculating Z arrays for bucket 18
  Entering block accumulator loop for bucket 18:
  bucket 15: 70%
  bucket 14: 70%
  bucket 12: 80%
  bucket 13: 90%
  Sorting block time: 00:00:00
Returning block of 64014 for bucket 11
  bucket 16: 60%
  bucket 17: 10%
  bucket 15: 80%
  bucket 18: 10%
  bucket 14: 80%
  bucket 13: 100%
  Sorting block of length 25050 for bucket 13
  (Using difference cover)
  bucket 12: 90%
Getting block 19 of 60
  Reserving size (80386) for bucket 19
  Calculating Z arrays for bucket 19
  Entering block accumulator loop for bucket 19:
  bucket 17: 20%
  bucket 16: 70%
  bucket 15: 90%
  Sorting block time: 00:00:00
Returning block of 25051 for bucket 13
  bucket 18: 20%
  bucket 14: 90%
  bucket 12: 100%
  Sorting block of length 78883 for bucket 12
  (Using difference cover)
  bucket 17: 30%
  bucket 19: 10%
  bucket 15: 100%
  Sorting block of length 23321 for bucket 15
  (Using difference cover)
Getting block 20 of 60
  Reserving size (80386) for bucket 20
  Calculating Z arrays for bucket 20
  Entering block accumulator loop for bucket 20:
  bucket 16: 80%
  bucket 18: 30%
  bucket 14: 100%
  Sorting block of length 60985 for bucket 14
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23322 for bucket 15
  bucket 17: 40%
  bucket 20: 10%
  bucket 19: 20%
  bucket 16: 90%
Getting block 21 of 60
  Reserving size (80386) for bucket 21
  Calculating Z arrays for bucket 21
  Entering block accumulator loop for bucket 21:
  bucket 18: 40%
  Sorting block time: 00:00:00
Returning block of 78884 for bucket 12
  bucket 17: 50%
  Sorting block time: 00:00:00
Returning block of 60986 for bucket 14
  bucket 20: 20%
  bucket 19: 30%
  bucket 16: 100%
  Sorting block of length 71542 for bucket 16
  (Using difference cover)
  bucket 18: 50%
  bucket 21: 10%
  bucket 17: 60%
  bucket 20: 30%
  bucket 19: 40%
Getting block 22 of 60
  Reserving size (80386) for bucket 22
  Calculating Z arrays for bucket 22
  Entering block accumulator loop for bucket 22:
Getting block 23 of 60
  Reserving size (80386) for bucket 23
  Calculating Z arrays for bucket 23
  Entering block accumulator loop for bucket 23:
  bucket 18: 60%
  bucket 17: 70%
  bucket 20: 40%
  bucket 21: 20%
  Sorting block time: 00:00:00
Returning block of 71543 for bucket 16
  bucket 19: 50%
  bucket 22: 10%
  bucket 23: 10%
  bucket 18: 70%
  bucket 17: 80%
  bucket 20: 50%
  bucket 21: 30%
  bucket 19: 60%
Getting block 24 of 60
  Reserving size (80386) for bucket 24
  Calculating Z arrays for bucket 24
  Entering block accumulator loop for bucket 24:
  bucket 22: 20%
  bucket 23: 20%
  bucket 18: 80%
  bucket 17: 90%
  bucket 20: 60%
  bucket 19: 70%
  bucket 21: 40%
  bucket 24: 10%
  bucket 22: 30%
  bucket 17: 100%
  Sorting block of length 42903 for bucket 17
  (Using difference cover)
  bucket 20: 70%
  bucket 23: 30%
  bucket 18: 90%
  bucket 19: 80%
  bucket 21: 50%
  bucket 20: 80%
  Sorting block time: 00:00:00
Returning block of 42904 for bucket 17
  bucket 22: 40%
  bucket 24: 20%
  bucket 23: 40%
  bucket 18: 100%
  Sorting block of length 65482 for bucket 18
  (Using difference cover)
  bucket 19: 90%
  bucket 20: 90%
Getting block 25 of 60
  Reserving size (80386) for bucket 25
  Calculating Z arrays for bucket 25
  Entering block accumulator loop for bucket 25:
  bucket 21: 60%
  bucket 22: 50%
  bucket 23: 50%
  bucket 24: 30%
  bucket 19: 100%
  Sorting block of length 64120 for bucket 19
  (Using difference cover)
  bucket 20: 100%
  Sorting block of length 24362 for bucket 20
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 65483 for bucket 18
  bucket 25: 10%
  bucket 22: 60%
  bucket 21: 70%
  bucket 23: 60%
  Sorting block time: 00:00:00
Returning block of 24363 for bucket 20
  bucket 24: 40%
Getting block 26 of 60
  Reserving size (80386) for bucket 26
  Calculating Z arrays for bucket 26
  Entering block accumulator loop for bucket 26:
  Sorting block time: 00:00:00
Returning block of 64121 for bucket 19
  bucket 25: 20%
  bucket 22: 70%
  bucket 21: 80%
Getting block 27 of 60
  Reserving size (80386) for bucket 27
  Calculating Z arrays for bucket 27
  Entering block accumulator loop for bucket 27:
  bucket 23: 70%
  bucket 24: 50%
  bucket 26: 10%
  bucket 22: 80%
Getting block 28 of 60
  Reserving size (80386) for bucket 28
  Calculating Z arrays for bucket 28
  bucket 25: 30%
  Entering block accumulator loop for bucket 28:
  bucket 23: 80%
  bucket 27: 10%
  bucket 21: 90%
  bucket 24: 60%
  bucket 26: 20%
  bucket 22: 90%
  bucket 28: 10%
  bucket 25: 40%
  bucket 23: 90%
  bucket 27: 20%
  bucket 21: 100%
  Sorting block of length 70347 for bucket 21
  (Using difference cover)
  bucket 24: 70%
  bucket 22: 100%
  Sorting block of length 41799 for bucket 22
  (Using difference cover)
  bucket 28: 20%
  bucket 26: 30%
  bucket 23: 100%
  Sorting block of length 68917 for bucket 23
  (Using difference cover)
  bucket 25: 50%
  bucket 27: 30%
  bucket 24: 80%
  Sorting block time: 00:00:00
Returning block of 70348 for bucket 21
  Sorting block time: 00:00:00
Returning block of 41800 for bucket 22
  bucket 28: 30%
  bucket 26: 40%
  bucket 25: 60%
  bucket 27: 40%
  bucket 24: 90%
  Sorting block time: 00:00:00
Returning block of 68918 for bucket 23
Getting block 29 of 60
  Reserving size (80386) for bucket 29
  Calculating Z arrays for bucket 29
  Entering block accumulator loop for bucket 29:
Getting block 30 of 60
  Reserving size (80386) for bucket 30
  Calculating Z arrays for bucket 30
  bucket 28: 40%
  Entering block accumulator loop for bucket 30:
  bucket 26: 50%
  bucket 25: 70%
  bucket 27: 50%
  bucket 24: 100%
  Sorting block of length 44925 for bucket 24
  (Using difference cover)
Getting block 31 of 60
  Reserving size (80386) for bucket 31
  Calculating Z arrays for bucket 31
  Entering block accumulator loop for bucket 31:
  bucket 29: 10%
  bucket 30: 10%
  bucket 28: 50%
  bucket 25: 80%
  bucket 26: 60%
  bucket 27: 60%
  Sorting block time: 00:00:00
Returning block of 44926 for bucket 24
  bucket 29: 20%
  bucket 30: 20%
  bucket 28: 60%
  bucket 31: 10%
  bucket 27: 70%
  bucket 25: 90%
  bucket 26: 70%
Getting block 32 of 60
  Reserving size (80386) for bucket 32
  Calculating Z arrays for bucket 32
  Entering block accumulator loop for bucket 32:
  bucket 28: 70%
  bucket 30: 30%
  bucket 29: 30%
  bucket 31: 20%
  bucket 27: 80%
  bucket 25: 100%
  Sorting block of length 78466 for bucket 25
  (Using difference cover)
  bucket 26: 80%
  bucket 32: 10%
  bucket 28: 80%
  bucket 30: 40%
  bucket 29: 40%
  bucket 31: 30%
  bucket 27: 90%
  bucket 26: 90%
  bucket 32: 20%
  bucket 28: 90%
  Sorting block time: 00:00:00
Returning block of 78467 for bucket 25
  bucket 30: 50%
  bucket 29: 50%
  bucket 27: 100%
  Sorting block of length 65712 for bucket 27
  (Using difference cover)
  bucket 31: 40%
  bucket 26: 100%
  Sorting block of length 72455 for bucket 26
  (Using difference cover)
  bucket 28: 100%
  Sorting block of length 47677 for bucket 28
  (Using difference cover)
  bucket 32: 30%
  bucket 30: 60%
  bucket 29: 60%
Getting block 33 of 60
  Reserving size (80386) for bucket 33
  Calculating Z arrays for bucket 33
  Entering block accumulator loop for bucket 33:
  bucket 31: 50%
  Sorting block time: 00:00:00
Returning block of 65713 for bucket 27
  bucket 32: 40%
  Sorting block time: 00:00:00
Returning block of 47678 for bucket 28
  bucket 30: 70%
  bucket 33: 10%
  bucket 29: 70%
  Sorting block time: 00:00:00
Returning block of 72456 for bucket 26
  bucket 31: 60%
  bucket 32: 50%
Getting block 34 of 60
  Reserving size (80386) for bucket 34
  Calculating Z arrays for bucket 34
  Entering block accumulator loop for bucket 34:
  bucket 30: 80%
  bucket 33: 20%
Getting block 35 of 60
  Reserving size (80386) for bucket 35
  Calculating Z arrays for bucket 35
  Entering block accumulator loop for bucket 35:
  bucket 29: 80%
  bucket 31: 70%
Getting block 36 of 60
  Reserving size (80386) for bucket 36
  Calculating Z arrays for bucket 36
  Entering block accumulator loop for bucket 36:
  bucket 32: 60%
  bucket 34: 10%
  bucket 30: 90%
  bucket 33: 30%
  bucket 35: 10%
  bucket 29: 90%
  bucket 36: 10%
  bucket 32: 70%
  bucket 31: 80%
  bucket 33: 40%
  bucket 34: 20%
  bucket 30: 100%
  Sorting block of length 58967 for bucket 30
  (Using difference cover)
  bucket 35: 20%
  bucket 29: 100%
  Sorting block of length 71244 for bucket 29
  (Using difference cover)
  bucket 32: 80%
  bucket 33: 50%
  bucket 36: 20%
  bucket 31: 90%
  bucket 34: 30%
  Sorting block time: 00:00:00
Returning block of 58968 for bucket 30
  bucket 35: 30%
  Sorting block time: 00:00:00
Returning block of 71245 for bucket 29
  bucket 33: 60%
  bucket 32: 90%
  bucket 34: 40%
  bucket 36: 30%
  bucket 31: 100%
  Sorting block of length 51078 for bucket 31
  (Using difference cover)
  bucket 35: 40%
Getting block 37 of 60
  Reserving size (80386) for bucket 37
  Calculating Z arrays for bucket 37
  Entering block accumulator loop for bucket 37:
  bucket 33: 70%
  bucket 32: 100%
  Sorting block of length 47664 for bucket 32
  (Using difference cover)
  bucket 34: 50%
  bucket 36: 40%
  Sorting block time: 00:00:00
Returning block of 51079 for bucket 31
  bucket 35: 50%
  bucket 37: 10%
Getting block 38 of 60
  Reserving size (80386) for bucket 38
  Calculating Z arrays for bucket 38
  Entering block accumulator loop for bucket 38:
  bucket 33: 80%
  bucket 34: 60%
  Sorting block time: 00:00:00
Returning block of 47665 for bucket 32
  bucket 36: 50%
  bucket 37: 20%
  bucket 35: 60%
Getting block 39 of 60
  Reserving size (80386) for bucket 39
  Calculating Z arrays for bucket 39
  Entering block accumulator loop for bucket 39:
  bucket 38: 10%
  bucket 33: 90%
  bucket 34: 70%
Getting block 40 of 60
  Reserving size (80386) for bucket 40
  Calculating Z arrays for bucket 40
  Entering block accumulator loop for bucket 40:
  bucket 36: 60%
  bucket 37: 30%
  bucket 35: 70%
  bucket 39: 10%
  bucket 33: 100%
  Sorting block of length 56837 for bucket 33
  (Using difference cover)
  bucket 38: 20%
  bucket 34: 80%
  bucket 40: 10%
  bucket 36: 70%
  bucket 37: 40%
  bucket 35: 80%
  bucket 39: 20%
  bucket 38: 30%
  Sorting block time: 00:00:00
Returning block of 56838 for bucket 33
  bucket 34: 90%
  bucket 37: 50%
  bucket 40: 20%
  bucket 36: 80%
  bucket 39: 30%
  bucket 35: 90%
  bucket 38: 40%
Getting block 41 of 60
  Reserving size (80386) for bucket 41
  Calculating Z arrays for bucket 41
  Entering block accumulator loop for bucket 41:
  bucket 34: 100%
  Sorting block of length 63751 for bucket 34
  (Using difference cover)
  bucket 37: 60%
  bucket 39: 40%
  bucket 35: 100%
  Sorting block of length 77680 for bucket 35
  (Using difference cover)
  bucket 40: 30%
  bucket 36: 90%
  bucket 41: 10%
  bucket 38: 50%
  Sorting block time: 00:00:00
Returning block of 63752 for bucket 34
  bucket 37: 70%
  bucket 39: 50%
  bucket 40: 40%
  bucket 41: 20%
  bucket 36: 100%
  Sorting block of length 79374 for bucket 36
  (Using difference cover)
  bucket 38: 60%
  Sorting block time: 00:00:00
Returning block of 77681 for bucket 35
Getting block 42 of 60
  Reserving size (80386) for bucket 42
  Calculating Z arrays for bucket 42
  Entering block accumulator loop for bucket 42:
  bucket 37: 80%
  bucket 39: 60%
  bucket 41: 30%
  bucket 40: 50%
  bucket 38: 70%
  bucket 42: 10%
  Sorting block time: 00:00:00
Returning block of 79375 for bucket 36
  bucket 37: 90%
  bucket 41: 40%
  bucket 39: 70%
  bucket 40: 60%
  bucket 38: 80%
  bucket 42: 20%
  bucket 41: 50%
  bucket 37: 100%
  Sorting block of length 64081 for bucket 37
  (Using difference cover)
  bucket 39: 80%
Getting block 43 of 60
  Reserving size (80386) for bucket 43
  Calculating Z arrays for bucket 43
  Entering block accumulator loop for bucket 43:
  bucket 40: 70%
  bucket 38: 90%
  bucket 42: 30%
  bucket 41: 60%
  bucket 43: 10%
  bucket 39: 90%
  Sorting block time: 00:00:00
Returning block of 64082 for bucket 37
  bucket 40: 80%
Getting block 44 of 60
  Reserving size (80386) for bucket 44
  Calculating Z arrays for bucket 44
  Entering block accumulator loop for bucket 44:
  bucket 42: 40%
  bucket 38: 100%
  Sorting block of length 44571 for bucket 38
  (Using difference cover)
  bucket 41: 70%
  bucket 43: 20%
  bucket 39: 100%
  Sorting block of length 45620 for bucket 39
  (Using difference cover)
Getting block 45 of 60
  Reserving size (80386) for bucket 45
  Calculating Z arrays for bucket 45
  Entering block accumulator loop for bucket 45:
  bucket 44: 10%
  bucket 40: 90%
  Sorting block time: 00:00:00
Returning block of 44572 for bucket 38
  bucket 42: 50%
  bucket 41: 80%
  bucket 43: 30%
  Sorting block time: 00:00:00
Returning block of 45621 for bucket 39
  bucket 44: 20%
  bucket 45: 10%
Getting block 46 of 60
  Reserving size (80386) for bucket 46
  Calculating Z arrays for bucket 46
  Entering block accumulator loop for bucket 46:
  bucket 42: 60%
  bucket 40: 100%
  Sorting block of length 76104 for bucket 40
  (Using difference cover)
  bucket 41: 90%
  bucket 43: 40%
Getting block 47 of 60
  Reserving size (80386) for bucket 47
  Calculating Z arrays for bucket 47
  Entering block accumulator loop for bucket 47:
  bucket 44: 30%
  bucket 45: 20%
  bucket 46: 10%
  bucket 42: 70%
  bucket 41: 100%
  Sorting block of length 45137 for bucket 41
  (Using difference cover)
  bucket 43: 50%
  bucket 44: 40%
  bucket 47: 10%
  Sorting block time: 00:00:00
Returning block of 76105 for bucket 40
  bucket 45: 30%
  bucket 42: 80%
  bucket 46: 20%
  Sorting block time: 00:00:00
Returning block of 45138 for bucket 41
  bucket 43: 60%
  bucket 44: 50%
  bucket 47: 20%
  bucket 42: 90%
  bucket 45: 40%
  bucket 46: 30%
Getting block 48 of 60
  Reserving size (80386) for bucket 48
  Calculating Z arrays for bucket 48
  Entering block accumulator loop for bucket 48:
Getting block 49 of 60
  Reserving size (80386) for bucket 49
  Calculating Z arrays for bucket 49
  Entering block accumulator loop for bucket 49:
  bucket 43: 70%
  bucket 44: 60%
  bucket 47: 30%
  bucket 42: 100%
  Sorting block of length 41628 for bucket 42
  (Using difference cover)
  bucket 45: 50%
  bucket 48: 10%
  bucket 46: 40%
  bucket 49: 10%
  bucket 44: 70%
  bucket 43: 80%
  Sorting block time: 00:00:00
Returning block of 41629 for bucket 42
  bucket 47: 40%
  bucket 45: 60%
  bucket 48: 20%
  bucket 44: 80%
  bucket 46: 50%
  bucket 43: 90%
  bucket 49: 20%
Getting block 50 of 60
  Reserving size (80386) for bucket 50
  Calculating Z arrays for bucket 50
  Entering block accumulator loop for bucket 50:
  bucket 47: 50%
  bucket 44: 90%
  bucket 45: 70%
  bucket 48: 30%
  bucket 50: 10%
  bucket 43: 100%
  Sorting block of length 62026 for bucket 43
  (Using difference cover)
  bucket 46: 60%
  bucket 49: 30%
  bucket 47: 60%
  bucket 44: 100%
  Sorting block of length 29636 for bucket 44
  (Using difference cover)
  bucket 50: 20%
  bucket 48: 40%
  bucket 45: 80%
  Sorting block time: 00:00:00
Returning block of 29637 for bucket 44
  bucket 46: 70%
  Sorting block time: 00:00:00
Returning block of 62027 for bucket 43
  bucket 49: 40%
  bucket 50: 30%
  bucket 47: 70%
  bucket 48: 50%
  bucket 45: 90%
Getting block 51 of 60
  Reserving size (80386) for bucket 51
  Calculating Z arrays for bucket 51
  Entering block accumulator loop for bucket 51:
  bucket 46: 80%
  bucket 50: 40%
  bucket 49: 50%
Getting block 52 of 60
  Reserving size (80386) for bucket 52
  Calculating Z arrays for bucket 52
  Entering block accumulator loop for bucket 52:
  bucket 47: 80%
  bucket 51: 10%
  bucket 48: 60%
  bucket 45: 100%
  Sorting block of length 78144 for bucket 45
  (Using difference cover)
  bucket 50: 50%
  bucket 46: 90%
  bucket 52: 10%
  bucket 49: 60%
  bucket 51: 20%
  bucket 47: 90%
  bucket 48: 70%
  bucket 50: 60%
  Sorting block time: 00:00:00
Returning block of 78145 for bucket 45
  bucket 51: 30%
  bucket 52: 20%
  bucket 46: 100%
  Sorting block of length 71384 for bucket 46
  (Using difference cover)
  bucket 50: 70%
  bucket 49: 70%
  bucket 47: 100%
  Sorting block of length 60986 for bucket 47
  (Using difference cover)
  bucket 48: 80%
  bucket 51: 40%
  bucket 50: 80%
  bucket 52: 30%
Getting block 53 of 60
  Reserving size (80386) for bucket 53
  Calculating Z arrays for bucket 53
  Entering block accumulator loop for bucket 53:
  bucket 49: 80%
  Sorting block time: 00:00:00
Returning block of 60987 for bucket 47
  bucket 48: 90%
  Sorting block time: 00:00:00
Returning block of 71385 for bucket 46
  bucket 51: 50%
  bucket 50: 90%
  bucket 53: 10%
  bucket 52: 40%
  bucket 49: 90%
  bucket 53: 20%
  bucket 51: 60%
  bucket 50: 100%
  Sorting block of length 41640 for bucket 50
  (Using difference cover)
  bucket 48: 100%
  Sorting block of length 44557 for bucket 48
  (Using difference cover)
  bucket 52: 50%
Getting block 54 of 60
  Reserving size (80386) for bucket 54
  Calculating Z arrays for bucket 54
  Entering block accumulator loop for bucket 54:
  bucket 53: 30%
  bucket 51: 70%
Getting block 55 of 60
  Reserving size (80386) for bucket 55
  Calculating Z arrays for bucket 55
  Entering block accumulator loop for bucket 55:
  Sorting block time: 00:00:00
Returning block of 41641 for bucket 50
  Sorting block time: 00:00:00
Returning block of 44558 for bucket 48
  bucket 49: 100%
  Sorting block of length 64449 for bucket 49
  (Using difference cover)
  bucket 52: 60%
  bucket 53: 40%
  bucket 54: 10%
  bucket 51: 80%
  bucket 55: 10%
  bucket 52: 70%
  bucket 53: 50%
  bucket 54: 20%
  bucket 51: 90%
  bucket 55: 20%
  Sorting block time: 00:00:00
Returning block of 64450 for bucket 49
  bucket 52: 80%
Getting block 56 of 60
  Reserving size (80386) for bucket 56
  Calculating Z arrays for bucket 56
  Entering block accumulator loop for bucket 56:
  bucket 53: 60%
  bucket 51: 100%
  Sorting block of length 51702 for bucket 51
  (Using difference cover)
  bucket 54: 30%
Getting block 57 of 60
  Reserving size (80386) for bucket 57
  Calculating Z arrays for bucket 57
  Entering block accumulator loop for bucket 57:
  bucket 55: 30%
  bucket 53: 70%
  bucket 52: 90%
  bucket 56: 10%
  bucket 54: 40%
  bucket 57: 10%
Getting block 58 of 60
  Reserving size (80386) for bucket 58
  Calculating Z arrays for bucket 58
  Entering block accumulator loop for bucket 58:
  bucket 55: 40%
  Sorting block time: 00:00:00
Returning block of 51703 for bucket 51
  bucket 53: 80%
  bucket 52: 100%
  Sorting block of length 75518 for bucket 52
  (Using difference cover)
  bucket 56: 20%
  bucket 57: 20%
  bucket 54: 50%
  bucket 55: 50%
  bucket 58: 10%
  bucket 53: 90%
  bucket 56: 30%
  bucket 57: 30%
  bucket 53: 100%
  Sorting block of length 1905 for bucket 53
  (Using difference cover)
  bucket 54: 60%
  Sorting block time: 00:00:00
Returning block of 1906 for bucket 53
  bucket 55: 60%
  bucket 58: 20%
  Sorting block time: 00:00:00
Returning block of 75519 for bucket 52
  bucket 57: 40%
  bucket 56: 40%
  bucket 54: 70%
  bucket 55: 70%
  bucket 58: 30%
  bucket 57: 50%
  bucket 56: 50%
Getting block 59 of 60
  Reserving size (80386) for bucket 59
  Calculating Z arrays for bucket 59
  Entering block accumulator loop for bucket 59:
  bucket 54: 80%
  bucket 55: 80%
  bucket 58: 40%
  bucket 57: 60%
Getting block 60 of 60
  Reserving size (80386) for bucket 60
  Calculating Z arrays for bucket 60
  Entering block accumulator loop for bucket 60:
  bucket 56: 60%
  bucket 55: 90%
  bucket 58: 50%
  bucket 59: 10%
  bucket 57: 70%
  bucket 60: 10%
  bucket 54: 90%
  bucket 55: 100%
  Sorting block of length 45505 for bucket 55
  (Using difference cover)
  bucket 58: 60%
  bucket 57: 80%
  bucket 56: 70%
  bucket 60: 20%
  bucket 59: 20%
  bucket 54: 100%
  Sorting block of length 99806 for bucket 54
  (Using difference cover)
  bucket 58: 70%
  bucket 57: 90%
  Sorting block time: 00:00:00
Returning block of 45506 for bucket 55
  bucket 60: 30%
  bucket 56: 80%
  bucket 59: 30%
  bucket 60: 40%
  bucket 57: 100%
  Sorting block of length 24880 for bucket 57
  (Using difference cover)
  bucket 58: 80%
  Sorting block time: 00:00:00
Returning block of 24881 for bucket 57
  bucket 60: 50%
  bucket 58: 90%
  bucket 56: 90%
  bucket 59: 40%
  Sorting block time: 00:00:00
Returning block of 99807 for bucket 54
  bucket 60: 60%
  bucket 58: 100%
  Sorting block of length 71078 for bucket 58
  (Using difference cover)
  bucket 60: 70%
  bucket 56: 100%
  Sorting block of length 73081 for bucket 56
  (Using difference cover)
  bucket 59: 50%
  bucket 60: 80%
  Sorting block time: 00:00:00
Returning block of 71079 for bucket 58
  bucket 59: 60%
  bucket 60: 90%
  Sorting block time: 00:00:00
Returning block of 73082 for bucket 56
  bucket 60: 100%
  Sorting block of length 72883 for bucket 60
  (Using difference cover)
  bucket 59: 70%
  bucket 59: 80%
  Sorting block time: 00:00:00
Returning block of 72884 for bucket 60
  bucket 59: 90%
  bucket 59: 100%
  Sorting block of length 74732 for bucket 59
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 74733 for bucket 59
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 633113
fchr[G]: 1702357
fchr[T]: 2787451
fchr[$]: 3429816
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 5346225 bytes to primary EBWT file: /mnt/gpfs/Hackathon/Test/binning/Bin_1/Bin_1.fasta.rev.1.bt2
Wrote 857460 bytes to secondary EBWT file: /mnt/gpfs/Hackathon/Test/binning/Bin_1/Bin_1.fasta.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 3429816
    bwtLen: 3429817
    sz: 857454
    bwtSz: 857455
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 214364
    offsSz: 857456
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 17864
    numLines: 17864
    ebwtTotLen: 1143296
    ebwtTotSz: 1143296
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
