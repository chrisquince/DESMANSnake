
import glob,os
include: "Common.snake"

#BINS=[path.split('/')[1] for path in  glob.glob("binning/Bin_*/Bin_*fasta")]

print(",".join(BINS))

print(",".join(SAMPLES))

print(",".join(GROUPS))

rule all : 
    input: expand("Map/{bins}/{groups}/{samples}.sorted.bam",bins=BINS,groups=GROUPS,samples=SAMPLES)


rule bowtie_index:
    input:   IN + "/binning/{ref}/{ref}.fasta"
    output:  touch("{path}/{ref}/index.done")
    params:  "{path}/{ref}/index"
    threads: THREADS
    log:     "{path}/{ref}/index.log"
    message: "Building bowtie index for {input}"
    shell:   "bowtie2-build {input} {params} --threads {THREADS} &> {log}"

#consider ignoring reads aligned without their pairs
rule bowtie_align:
    input:   left=left_reads, right=right_reads,
             index="Index/{bin}/index.done"
    output:  "Map/{bin}/{group}/{sample}.ubam"
             #temp("{path}/{group,(sample|group)\d+}.bam")
    params:  flag=lambda w: "-q" if is_fastq(w) else "-f",
             left=IN + "/" + "{sample}/{sample}_R1.fq.gz",
             right=IN + "/" + "{sample}/{sample}_R2.fq.gz",
             index="Index/{bin}/index",
             align="",#"--no-unal --maxins 1000 --n-ceil 0,0 --np 100500",
             view=""#"-q 10"
    threads: THREADS
    log:     "Map/{group}.{sample}.{bin}.bowtie.log"
    message: "Aligning reads of {wildcards.group} onto {params.index} with bowtie"
    #shell:   "bowtie2 -x {params.index} {params.flag} -p {threads} {params.align}"
    #         " -1 {input.left} -2 {input.right} 2> {log} | samtools view -bh {params.view} - > {output}"
    shell:
        'bowtie2 -x {params.index} {params.flag} -p {threads} {params.align} -1 {params.left} -2 {params.right} 2>> {log} | samtools view -bh {params.view} - > {output}'


rule samtools_sort:
    input:
        "{path}/{name}.ubam"
    output:
        "{path}/{name}.sorted.bam"
        #temp("{path}/{name}.sorted.bam")
    threads: THREADS
    log:
        "{path}/{name}.sort.log"
    message: "Sorting {input}"
    run:
        shell("samtools sort --threads %d -T {wildcards.path}/{wildcards.name}.tmp -O bam -o {output} {input} &> {log}" % (threads - 1))

